{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getTransactions","csvData","filter","r","map","trim","parseFloat","toFixed","parseInt","toPositions","transactions","positions","Map","forEach","t","symbol","cur","costBase","marketValue","shares","quantity","purchasePrice","price","toScores","scores","score","Set","add","toPositionData","values","push","labels","v","datasets","data","backgroundColor","pieColors","length","borderColor","borderWidth","toScoreData","sum","reduce","a","b","Array","from","join","Math","round","n","colors","res","i","App","useState","positionData","setPositionData","scoreData","setScoreData","useEffect","console","log","className","onFileLoaded","_","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50f17320.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport CSVReader from 'react-csv-reader';\nimport { Pie } from '@reactchartjs/react-chart.js';\n\n\nconst App = () => {\n  const [positionData, setPositionData] = useState({});\n  const [scoreData, setScoreData] = useState({});\n\n  useEffect(() => {\n    console.log('trigger use effect hook');\n  })\n\n  return (\n    <div className=\"App\">\n      <CSVReader onFileLoaded={\n        (data, _) => {\n          let transactions = getTransactions(data);\n          let positions = toPositions(transactions);\n          let positionData = toPositionData(positions);\n          setPositionData(positionData);\n\n          let scores = toScores(transactions);\n          let scoreData = toScoreData(scores)\n          setScoreData(scoreData);\n        }} />\n      <h2>Symbols By Market Value</h2>\n      <Pie data={positionData} />\n      <h2>Scores By Cost Base</h2>\n      <Pie data={scoreData} />\n    </div>\n  )\n}\n\nconst getTransactions = (csvData) => (\n  csvData.filter(r => r[9] && r[9] !== \"Trade Date\")\n    .map(r => (\n      {\n        \"symbol\": r[0].trim(),\n        \"price\": parseFloat(r[1]).toFixed(2),\n        \"date\": r[2],\n        \"tradeDate\": r[9],\n        \"purchasePrice\": parseFloat(r[10]).toFixed(2),\n        \"quantity\": parseInt(r[11]),\n        \"score\": parseFloat(r[13]).toFixed(2)\n      }))\n)\n\nconst toPositions = (transactions) => {\n  let positions = new Map();\n  transactions.forEach(t => {\n    let symbol = t.symbol;\n\n    let cur = positions[t.symbol];\n    if (!cur) {\n      cur = {\n        symbol: symbol,\n        costBase: 0.0,\n        marketValue: 0.0,\n        shares: 0\n      };\n    }\n    cur.shares = cur.shares + t.quantity;\n    cur.costBase = cur.costBase + (t.quantity * t.purchasePrice);\n    cur.marketValue = cur.marketValue + (t.quantity * t.price);\n    positions[symbol] = cur;\n  });\n  return positions;\n};\n\nconst toScores = (transactions) => {\n  let scores = new Map();\n  transactions.forEach(t => {\n    let score = t.score;\n\n    let cur = scores[score];\n    if (!cur) {\n      cur = {\n        symbol: new Set(),\n        costBase: 0.0,\n        marketValue: 0.0,\n      };\n    }\n    cur.symbol.add(t.symbol);\n    cur.costBase = cur.costBase + (t.quantity * t.purchasePrice);\n    cur.marketValue = cur.marketValue + (t.quantity * t.price);\n    scores[score] = cur;\n  });\n  return scores;\n};\n\nconst toPositionData = (positions) => {\n  let values = [];\n  for (let symbol in positions) {\n    values.push(positions[symbol])\n  }\n  return {\n    labels: values.map(v => v.symbol),\n    datasets: [{\n      data: values.map(v => v.marketValue),\n      backgroundColor: pieColors(values.length, 0.2),\n      borderColor: pieColors(values.length, 1.0),\n      borderWidth: 1,\n    }]\n  };\n}\n\nconst toScoreData = (scores) => {\n  let values = [];\n  for (let score in scores) {\n    values.push(scores[score])\n  }\n  let sum = values.map(v => v.costBase).reduce((a, b) => a + b, 0);\n  return {\n    labels: values.map(v => Array.from(v.symbol).join(',')),\n    datasets: [{\n      data: values.map(v => Math.round(v.costBase / sum * 100)),\n      backgroundColor: pieColors(values.length, 0.2),\n      borderColor: pieColors(values.length, 1.0),\n      borderWidth: 1,\n    }]\n  };\n}\n\nconst pieColors = (n, a) => {\n  let colors = [\n    `rgba(255, 99, 132, ${a})`,\n    `rgba(54, 162, 235, ${a})`,\n    `rgba(255, 206, 86, ${a})`,\n    `rgba(75, 192, 192, ${a})`,\n    `rgba(153, 102, 255, ${a})`,\n    `rgba(255, 159, 64, ${a})`,\n  ],\n    res = []\n  for (let i = 0; i < n - 1; i++) {\n    res.push(colors[i % 6]);\n  }\n  return res;\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}